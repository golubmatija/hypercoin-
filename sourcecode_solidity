// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import"IERC20.sol";

contract StableCoin {
 string public name;
 string public symbol;
 uint8 public decimals;
 uint256 public totalSupply;

mapping(address => uint256) public balanceOf;
mapping(address =>mapping(address => uint256)) public allowance;

 address public reserveAddress; // Address where reserve assets are held
 uint256 public reserveRatio; // Ratio of stablecoin units to reserve assets

constructor(string memory _name, string memory _symbol, uint8 _decimals, address _reserveAddress, uint256 _initialSupply) {
 name = _name;
 symbol = _symbol;
 decimals = _decimals;

 reserveAddress = _reserveAddress;
 reserveRatio =1; // 1 stablecoin unit = 1 reserve asset

 totalSupply = _initialSupply;
 balanceOf[msg.sender] = totalSupply;
 }

 function transfer(address _to, uint256 _value) publicreturns (bool success) {
require(balanceOf[msg.sender] >= _value, "Insufficient balance");
 balanceOf[msg.sender] -= _value;
 balanceOf[_to] += _value;
 emit Transfer(msg.sender, _to, _value);
returntrue;
 }

 function approve(address _spender, uint256 _value) publicreturns (bool success) {
 allowance[msg.sender][_spender] = _value;
 emit Approval(msg.sender, _spender, _value);
returntrue;
 }

 function transferFrom(address _from, address _to, uint256 _value) publicreturns (bool success) {
require(balanceOf[_from] >= _value, "Insufficient balance");
require(_value<= allowance[_from][msg.sender], "Allowance exceeded");

 balanceOf[_from] -= _value;
 balanceOf[_to] += _value;
 allowance[_from][msg.sender] -= _value;

 emit Transfer(_from, _to, _value);
returntrue;
 }

 function exchangeToReserve(uint256 _amount) public {
 uint256 reserveAmount = _amount * reserveRatio;
require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
require(IERC20(reserveAddress).balanceOf(address(this)) >= reserveAmount, "Insufficient reserve");

 balanceOf[msg.sender] -= _amount;
IERC20(reserveAddress).transfer(msg.sender, reserveAmount);
 emit ExchangeToReserve(msg.sender, _amount, reserveAmount);
 }

 function exchangeFromReserve(uint256 _amount) public {
 uint256 stablecoinAmount = _amount / reserveRatio;
require(IERC20(reserveAddress).balanceOf(address(this)) >= _amount, "Insufficient reserve");

 balanceOf[msg.sender] += stablecoinAmount;
IERC20(reserveAddress).transferFrom(msg.sender, address(this), _amount);
 emit ExchangeFromReserve(msg.sender, stablecoinAmount, _amount);
 }

 event Transfer(address indexed _from, address indexed _to, uint256 _value);
 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
 event ExchangeToReserve(address indexed _user, uint256 _amount, uint256 _reserveAmount);
 event ExchangeFromReserve(address indexed _user, uint256 _stablecoinAmount, uint256 _amount);
}




